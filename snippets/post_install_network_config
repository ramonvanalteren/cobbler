# Start post_install_network_config generated code
#if $getVar("system_name","") != ""
    #set ikeys = $interfaces.keys()
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+\.[0-9]+")
    ##
    ## Determine if we should use the MAC address to configure the interfaces first
    ## Only physical interfaces are required to have a MAC address
    ## Also determine the number of bonding devices we have, so we can set the
    ## max-bonds option in modprobe.conf accordingly.
    #set $configbymac = True
    #set $numbondingdevs = 0
    #for $iname in $ikeys
    	#set $idata = $interfaces[$iname]
    	#if $idata["mac_address"] == "" and not $vlanpattern.match($iname) and not $idata["bonding"].lower() == "master":
    		#set $configbymac = False
    	#end if
    	#if $idata["bonding"].lower() == "master"
    	    #set $numbondingdevs += 1
    	#end if
    #end for
    #set $i = 0
    
    #if $numbondingdevs > 0
echo "options bonding max_bonds=$numbondingdevs" >> /etc/modprobe.conf
    #end if
mkdir /etc/sysconfig/network-scripts/cobbler
cp /etc/sysconfig/network-scripts/ifcfg-lo /etc/sysconfig/network-scripts/cobbler/
    #if $gateway != ""
grep -v GATEWAY /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "GATEWAY=$gateway" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network
    #end if
    #for $iname in $ikeys
#  Start $iname
        #set $idata    = $interfaces[$iname]
        #set $mac      = $idata["mac_address"].upper()
        #set $static   = $idata["static"]
        #set $ip       = $idata["ip_address"]
        #set $netmask  = $idata["subnet"]
        #set $static_routes = $idata["static_routes"]
        #set $bonding  = $idata["bonding"]
        #set $bonding_master = $idata["bonding_master"]
        #set $bonding_opts = $idata["bonding_opts"]
        #set $devfile = "/etc/sysconfig/network-scripts/cobbler/ifcfg-" + $iname
        #set $routesfile = "/etc/sysconfig/network-scripts/cobbler/route-" + $iname
        #if $vlanpattern.match($iname)
            ## If this is a VLAN interface, skip it, anaconda doesn't know
            ## about VLANs.
            #set $is_vlan = "true"
        #else
            #set $is_vlan = "false"
        #end if
        #if $bonding.lower() == "master"
            ## Add required entry to modprobe.conf
echo "alias $iname bonding" >> /etc/modprobe.conf.cobbler
        #end if
        #if $configbymac and $is_vlan == "false" and $bonding.lower() != "master"
            ## This is the code path physical interfaces will follow.
            ## Get the current interface name
IFNAME=\$(ifconfig -a | grep -i '$mac' | cut -d ' ' -f 1)
            ## Rename this interface in modprobe.conf
grep \$IFNAME /etc/modprobe.conf | sed "s/\$IFNAME/$iname/" >> /etc/modprobe.conf.cobbler
grep -v \$IFNAME /etc/modprobe.conf >> /etc/modprobe.conf.new
rm -f /etc/modprobe.conf
mv /etc/modprobe.conf.new /etc/modprobe.conf
            ## Remove the old interface file the OS had for it
echo "DEVICE=$iname" > $devfile
echo "HWADDR=$mac" >> $devfile
echo "ONBOOT=yes" >> $devfile
            #if $bonding.lower() == "slave" and $bonding_master != ""
echo "SLAVE=yes" >> $devfile
echo "MASTER=$bonding_master" >> $devfile
            ## Set HOTPLUG=no, see Red Hat bugzilla 442339
echo "HOTPLUG=no" >> $devfile
            #end if
            #if $static.lower() == "true" or $bonding.lower() == "slave"
                #if $ip != "" and $bonding.lower() != "slave"
                    ## Only configure static networking if an IP-address is
                    ## configured
echo "BOOTPROTO=static" >> $devfile
echo "IPADDR=$ip" >> $devfile
                    #if $netmask == ""
                        ## Default to 255.255.255.0?
                        #set $netmask = "255.255.255.0"
                    #end if
echo "NETMASK=$netmask" >> $devfile
                #else
                    ## Leave the interface unconfigured
echo "BOOTPROTO=none" >> $devfile
                #end if
            #else
echo "BOOTPROTO=dhcp" >> $devfile
            #end if
        #else if $is_vlan == "true" or $bonding.lower() == "master"
            ## Handle non-physical interfaces with special care. :)
echo "# Cobbler generated non-physical interface" > $devfile
echo "DEVICE=$iname" >> $devfile
            #if $is_vlan == "true"
echo "VLAN=yes" >> $devfile
            #end if
            #if $bonding.lower() == "master" and $bonding_opts != ""
cat >> $devfile << EOF
BONDING_OPTS="$bonding_opts"
EOF
            #end if
echo "ONPARENT=yes" >> $devfile
            #if $static.lower() == "true"
                #if $ip != ""
                    ## Only configure static networking if an IP-address is
                    ## configured
echo "BOOTPROTO=static" >> $devfile
echo "IPADDR=$ip" >> $devfile
                    #if $netmask == ""
                        ## Default to 255.255.255.0?
                        #set $netmask = "255.255.255.0"
                    #end if
echo "NETMASK=$netmask" >> $devfile
                #else
                    ## Leave the interface unconfigured
echo "BOOTPROTO=none" >> $devfile
                #end if
            #else
echo "BOOTPROTO=dhcp" >> $devfile
            #end if
        #else
            ## jcapel note: I think we only have to rename the interfaces
            ## I'm assuming eth0 is the first item in the list here.
            ## This will fail when renaming ethX to ethY, avoid it!
            ## (we can fix this later if we're staging temporary files
            ## somewhere first.)
            #set $curiname = "eth" + $str($i)
            #if $iname != $curiname
sed -i "s/$curiname/$iname/" /etc/modprobe.conf
(
grep -v "DEVICE=" /etc/sysconfig/network-scripts/ifcfg-$curiname
echo "DEVICE=$iname"
) > /etc/sysconfig/network-scripts/cobbler/ifcfg-$iname
            #end if
		#end if
		#for $route in $static_routes
		    #set routepattern = $re.compile("[0-9/.]+:[0-9.]+")
		    #if $routepattern.match($route)
                #set $routebits = $route.split(":")
                #set [$network, $router] = $route.split(":")
echo "$network via $router" >> $routesfile
		    #else
# Warning: invalid route "$route"
            #end if
		#end for
		#set $i = $i + 1
#  End $iname
    #end for	
## Move all staged files to their final location
rm -f /etc/sysconfig/network-scripts/ifcfg-*
mv /etc/sysconfig/network-scripts/cobbler/* /etc/sysconfig/network-scripts/
rm -r /etc/sysconfig/network-scripts/cobbler
cat /etc/modprobe.conf.cobbler >> /etc/modprobe.conf
rm -f /etc/modprobe.conf.cobbler
#end if
# End post_install_network_config generated code
