/**
 * Copyright (c) 2009 Red Hat, Inc.
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */

package org.fedorahosted.cobbler;

import org.apache.commons.lang.StringUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * @author paji    (original for spacewalk)
 * @author mdehaan (code generated new version)
 * @version $Rev$
 */
public class $ObjectType extends CobblerObject {
    
    private ${ObjectType}(CobblerConnection clientIn) {
        client = clientIn;
    }

    #for $val in $fields 
        #set $field_name = $val[0]
        #set $field_default = $val[1]
        #set $field_default_sub = $val[2]
        #set $field_display_name = $val[3]
        #set $field_hidden = $val[4]
        #set $field_tooltip = $val[5]
        #set $field_choices = $val[6]
        #set $field_type = $val[7]
        #set $field_tokens = $field_name.split("_")
        #set $up_var_name = ""
        #for $ft in $field_tokens
           #set $up_var_name = $up_var_name + $ft.title()
        #end for
        ## // FIXME: need to infer the types and template stuff out
        ## // magically
        #set $var_type = "String" 

    #if $field_type == "str"
        #set $var_type = "String"
    #elif $field_type == "int" 
        #set $var_type = "Integer"
    #elif $field_type == "float"
        #set $var_type = "Double"
    #elif $field_type == "list"
        #set $var_type = "List <String>"
    #elif $field_type == "dict"
        #set $var_type = "Map <String, String>"
    #elif $field_type == "bool"
        #set $var_type = "Boolean"
    #end if

    #if $field_hidden != "True"

    /**
     * Set the value for field: $field_name
     * ${field_tooltip}s
     * @param input input value
     */
    public void set${up_var_name}(${var_type} input) {
        // FIXME: type mangling
        modify("${field_name}", input);
    }
    #end if
    
    /**
     * Retrieve the value for field: $field_name
    #if $field_tooltip != ""
     * comments: ${field_tooltip}
    #end if
     * @param input input value
     * @return the value of the field
     */
    public void get${up_var_name}() {
        // FIXME: type mangling
        // FIXME: implement
        return (${var_type})access("${field_name}");
    }

    #end for

    public static String getObjectType() {
        return "$ObjectTypeLower"
    }

    //public static $ObjectType lookupById(CobblerConnection client, String id) {
    //    return handleLookup(client, lookupDataMapById(client, 
    //                                    id, "find_$ObjectTypeLower"));
    //}
    
    //private static $ObjectType handleLookup(CobblerConnection client, Map map) {
    //    if (map != null) {
    //        $ObjectType obj = new ${ObjectType}(client);
    //        obj.dataMap = map;
    //        return obj;
    //    }
    //    return null;
    //}    
    
    /**
     * Returns a list of available $ObjectType objects 
     * @param connection the cobbler connection
     * @return a list of $ObjectType objects.
     */
    public static List<$ObjectType> list(CobblerConnection connection) {
        List <$ObjectType> list = new LinkedList<$ObjectType>();
        List <Map<String, Object > rawList = (List <Map<String, Object >>) 
                                        connection.invokeMethod("get_${ObjectTypeLower}s");
        
        for (Map<String, Object> map : rawList) {
            $ObjectType obj = new ${ObjectType}(connection);
            obj.dataMap = obj;
            list.add(obj);
        }
        return list;
    }

    //protected String invokeGetHandle() {
    //    return (String)client.invokeTokenMethod("get_${ObjectTypeLower}_handle", this.getName());
    //}
    
    //protected void invokeModify(String key, Object value) {
    //    client.invokeTokenMethod("modify_${ObjectTypeLower}", getHandle(), key, value);
    //}
    
    /**
     * Save the $ObjectType
     */
    //protected void invokeSave() {
    //    client.invokeTokenMethod("save_${ObjectTypeLower}", getHandle());
    //}

    /**
     * Remove the $ObjectType
     */
    //protected boolean invokeRemove() {
    //    return (Boolean) client.invokeTokenMethod("remove_${ObjectTypeLower}", getName());
    //}

    /**
     * Rename the $ObjectType 
     */
    //protected void invokeRename(String newName) {
    //    client.invokeTokenMethod("rename_${ObjectTypeLower}", getHandle(), newName);
    //}
    
    /**
     * Reloads the $ObjectType
     */
    //public void reload() {
    //    $ObjectType obj = lookupById(client, getId());
    //    map = obj.dataMap;
    //}
    
}
